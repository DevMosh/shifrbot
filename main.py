from aiogram import Router, F, types
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, State, StatesGroup
from aiogram.types import Message

from keyboard import *
from shifr import *

list_shift = ['–¶–µ–∑–∞—Ä—å', '–í–∏–∂–µ–Ω–µ—Ä–∞', '–ê—Ç–±–∞—à', '–¢—Ä–∏—Å–µ–º–∏—É—Å', '–ü–æ–ª–∏–±–∏–∞–Ω—Å–∫–∏–π –∫–≤–∞–¥—Ä–∞—Ç', '–ë–∏–≥—Ä–∞–º–Ω—ã–π', '–ì—Ä–æ–Ω—Å—Ñ–µ–ª—å–¥–∞']


class FSMFillForm(StatesGroup):
    word = State()  # —Å—é–¥–∞ —Å–ª–æ–≤–æ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è / –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    key = State()  # —Å—é–¥–∞ –∫–æ–¥
    # fill_gender = State()      # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    # upload_photo = State()     # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
    # fill_education = State()   # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    # fill_wish_news = State()   # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç—å –ª–∏ –Ω–æ–≤–æ—Å—Ç–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
router = Router()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(CommandStart())
async def process_start_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–∏–ø —à–∏—Ñ—Ä–æ–≤–∫–∏: ', reply_markup=start_menu())


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
@router.message(Command(commands='help'))
async def process_help_command(message: Message):
    await message.answer(text='/help')


@router.message(F.text.in_(['üîê', 'üîì']))
async def shifr_func(message: Message, state: FSMContext):
    await state.update_data(shifr_deshifr=message.text)
    await message.answer('–ö–∞–∫–æ–π —à–∏—Ñ—Ä —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?', reply_markup=shifr_menu())


@router.message(F.text.in_(list_shift))
async def chezar_func(message: Message, state: FSMContext):
    await state.update_data(name_shifr=message.text)
    await message.answer("–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:")
    if message.text == '–ê—Ç–±–∞—à':
        await state.set_state(FSMFillForm.key)
    else:
        await state.set_state(FSMFillForm.word)


@router.message(StateFilter(FSMFillForm.word), F.text.isalpha())
async def process_word_sent(message: Message, state: FSMContext):
    await state.update_data(word=message.text)
    data_state = await state.get_data()
    if data_state['name_shifr'] in ['–¶–µ–∑–∞—Ä—å', '–ü–æ–ª–∏–±–∏–∞–Ω—Å–∫–∏–π –∫–≤–∞–¥—Ä–∞—Ç']:
        await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É:', reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(FSMFillForm.key)
    elif data_state['name_shifr'] in ['–í–∏–∂–µ–Ω–µ—Ä–∞']:
        await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ:', reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(FSMFillForm.key)


@router.message(StateFilter(FSMFillForm.key))
async def process_key_sent(message: Message, state: FSMContext):
    print('test')
    data_state = await state.get_data()

    # word = ''
    # if data_state['name_shifr'] == '–ê—Ç–±–∞—à':
    #     pass
    # else:
    word = data_state['word'].upper()

    key = message.text
    text = '–í–∞—à —Ç–µ–∫—Å—Ç: '

    if data_state['shifr_deshifr'] == 'üîê':  # —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
        if data_state['name_shifr'] == '–¶–µ–∑–∞—Ä—å':
            text = caesar_cipher(word=word, key=int(key))
        if data_state['name_shifr'] == '–í–∏–∂–µ–Ω–µ—Ä–∞':
            text = vigener_cipher(word=word, key=key)
        if data_state['name_shifr'] == '–ê—Ç–±–∞—à':
            text = atbash_cipher(word=key)
        if data_state['name_shifr'] == '–ü–æ–ª–∏–±–∏–∞–Ω—Å–∫–∏–π –∫–≤–∞–¥—Ä–∞—Ç':
            text = polybian_square_cipher(word=word, key=key)

    if data_state['shifr_deshifr'] == 'üîì':  # —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
        if data_state['name_shifr'] == '–¶–µ–∑–∞—Ä—å':
            text = decrypt_caesar_cipher(word=word, key=int(key))
        if data_state['name_shifr'] == '–í–∏–∂–µ–Ω–µ—Ä–∞':
            text = decrypt_vigener_cipher(word=word, key=key)
        if data_state['name_shifr'] == '–ê—Ç–±–∞—à':
            text = atbash_cipher(word=key)
        if data_state['name_shifr'] == '–ü–æ–ª–∏–±–∏–∞–Ω—Å–∫–∏–π –∫–≤–∞–¥—Ä–∞—Ç':
            text = decrypt_polybian_square_cipher(word=word, key=key)

    await message.answer(text=f'–ì–æ—Ç–æ–≤–æ!\n\n{text}', reply_markup=start_menu())
    await state.clear()


@router.message(F.text == 'üîô –ù–∞–∑–∞–¥')
async def shifr_func(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=start_menu())